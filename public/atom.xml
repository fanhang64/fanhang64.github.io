<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HangZo&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fanhang64.github.io/"/>
  <updated>2019-08-01T08:20:50.444Z</updated>
  <id>https://fanhang64.github.io/</id>
  
  <author>
    <name>HangZo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git subtree 的使用</title>
    <link href="https://fanhang64.github.io/2019/06/12/subtree%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://fanhang64.github.io/2019/06/12/subtree的使用/</id>
    <published>2019-06-12T13:45:49.000Z</published>
    <updated>2019-08-01T08:20:50.444Z</updated>
    
    <content type="html"><![CDATA[<p>git subtree的主要命令有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree split --prefix=&lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>我们先准备一个仓库叫Photo，一个仓库叫libPNG，然后我们希望把libPNG作为Photo的子仓库。<br>Photo的路径为<code>https://github.com/fanhang64/Photo.git</code>，仓库里的文件有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Photo</span><br><span class="line">|</span><br><span class="line">    |-- .gitignore</span><br><span class="line">    |-- Photo.c</span><br><span class="line">    |-- Photo.h</span><br><span class="line">    |-- main.c</span><br><span class="line">    \-- README.rst</span><br></pre></td></tr></table></figure><a id="more"></a><p>libPNG的路径为<code>https://github.com/fanhang64/libPNG.git</code>，仓库里的文件有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">libpng</span><br><span class="line">    |</span><br><span class="line">    |-- libpng.c</span><br><span class="line">    |-- libpng.h</span><br><span class="line">    |-- README.rst</span><br><span class="line">    |--test.c</span><br><span class="line">    |--test.h</span><br></pre></td></tr></table></figure><p>以下操作均位于父仓库的根目录中。</p><h2 id="在父仓库中新增子仓库"><a href="#在父仓库中新增子仓库" class="headerlink" title="在父仓库中新增子仓库"></a>在父仓库中新增子仓库</h2><p>我们执行以下命令把libpng添加到Photo中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree add --prefix=sub/libpng https://github.com/fanhang64/libpng.git master --squash</span><br></pre></td></tr></table></figure><p>(<code>--squash</code>参数表示不拉取历史信息，而只生成一条commit信息。)</p><p>执行<code>git status</code>可以看到提示新增两条commit：<br><img src="https://s2.ax1x.com/2019/06/12/VWn2Ss.png" alt="image"></p><p><code>git log</code>查看详细修改：<br><img src="https://s2.ax1x.com/2019/06/12/VWuZ0f.png" alt="image"></p><p>执行<code>git push</code>把修改推送到远端Photo仓库，现在本地仓库与远端仓库的目录结构为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Photo</span><br><span class="line">    |</span><br><span class="line">    |-- sub/</span><br><span class="line">    |   |</span><br><span class="line">    |   \--libpng/</span><br><span class="line">    |       |</span><br><span class="line">    |       |-- libpng.c</span><br><span class="line">    |       |-- libpng.h</span><br><span class="line">    |       \-- README.rst</span><br><span class="line">    ||-- test.c</span><br><span class="line">    ||-- test.h</span><br><span class="line">    |</span><br><span class="line">    |-- Photo.c</span><br><span class="line">    |-- Photo.h</span><br><span class="line">    |-- main.c</span><br><span class="line">    \-- README.rst</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>现在的Photo仓库对于其他项目人员来说，可以不需要知道libpng是一个子仓库。什么意思呢？<br>当你<code>git clone</code>或者<code>git pull</code>的时候，你拉取到的是整个Photo(包括libpng在内，libpng就相当于Photo里的一个普通目录)；当你修改了libpng里的内容后执行<code>git push</code>，你将会把修改push到Photo上。<br>也就是说Photo仓库下的libpng与其他文件无异。</p><h2 id="从源仓库拉取更新"><a href="#从源仓库拉取更新" class="headerlink" title="从源仓库拉取更新"></a>从源仓库拉取更新</h2><p>如果源libpng仓库更新了，Photo里的libpng如何拉取更新？使用<code>git subtree pull</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree pull --prefix=sub/libpng https://github.com/fanhang64/libpng.git master --squash</span><br></pre></td></tr></table></figure><h2 id="推送修改到源仓库"><a href="#推送修改到源仓库" class="headerlink" title="推送修改到源仓库"></a>推送修改到源仓库</h2><p>如果在Photo仓库里修改了libpng，然后想把这个修改推送到源libpng仓库呢？使用<code>git subtree push</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree push --prefix=sub/libpng https://github.com/fanhang64/libPNG.git master</span><br></pre></td></tr></table></figure><h2 id="简化git-subtree命令"><a href="#简化git-subtree命令" class="headerlink" title="简化git subtree命令"></a>简化git subtree命令</h2><p>我们已经知道了git subtree 的命令的基本用法，但是上述几个命令还是显得有点复杂，特别是子仓库的源仓库地址，特别不方便记忆。<br>这里我们把子仓库的地址作为一个remote，方便记忆：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add -f libpng https://github.com/fanhang64/libPNG.git</span><br></pre></td></tr></table></figure><p>然后可以这样来使用git subtree命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git subtree add --prefix=sub/libpng libpng master --squash</span><br><span class="line">git subtree pull --prefix=sub/libpng libpng master --squash</span><br><span class="line">git subtree push --prefix=sub/libpng libpng master</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://segmentfault.com/a/1190000012002151" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012002151</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git subtree的主要命令有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git subtree add   --prefix=&amp;lt;prefix&amp;gt; &amp;lt;commit&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree add   --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;ref&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree pull  --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;ref&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree push  --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;ref&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree merge --prefix=&amp;lt;prefix&amp;gt; &amp;lt;commit&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git subtree split --prefix=&amp;lt;prefix&amp;gt; [OPTIONS] [&amp;lt;commit&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;我们先准备一个仓库叫Photo，一个仓库叫libPNG，然后我们希望把libPNG作为Photo的子仓库。&lt;br&gt;Photo的路径为&lt;code&gt;https://github.com/fanhang64/Photo.git&lt;/code&gt;，仓库里的文件有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Photo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- .gitignore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- Photo.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- Photo.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    \-- README.rst&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="git相关" scheme="https://fanhang64.github.io/categories/git%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="git" scheme="https://fanhang64.github.io/tags/git/"/>
    
      <category term="subtree" scheme="https://fanhang64.github.io/tags/subtree/"/>
    
  </entry>
  
  <entry>
    <title>C语言正确使用extern关键字</title>
    <link href="https://fanhang64.github.io/2019/05/23/C%E8%AF%AD%E8%A8%80%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8extern%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://fanhang64.github.io/2019/05/23/C语言正确使用extern关键字/</id>
    <published>2019-05-23T15:47:56.000Z</published>
    <updated>2019-08-01T08:20:50.436Z</updated>
    
    <content type="html"><![CDATA[<p>利用关键字extern，可以在一个文件中引用另一个文件中定义的变量或者函数，下面就结合具体的实例，分类说明一下。 </p><h3 id="一、引用同一个文件中的变量"><a href="#一、引用同一个文件中的变量" class="headerlink" title="一、引用同一个文件中的变量"></a>一、引用同一个文件中的变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照这个顺序，变量 <code>num</code>在<code>main</code>函数的后边进行声明和初始化的话，那么在<code>main</code>函数中是不能直接引用<code>num</code>这个变量的，因为当编译器编译到这一句话的时候，找不到<code>num</code>这个变量的声明，但是在<code>func</code>函数中是可以正常使用，因为<code>func</code>对<code>num</code>的调用是发生在<code>num</code>的声明和初始化之后。</p><a id="more"></a><p><strong>问题：</strong> 如果我不想改变<code>num</code>的声明的位置，但是想在<code>main</code>函数中直接使用<code>num</code>这个变量，怎么办呢？</p><p>可以使用<code>extern</code>这个关键字。像下面这一段代码，利用<code>extern</code>关键字先声明一下<code>num</code>变量，告诉编译器<code>num</code>这个变量是存在的，但是不是在这之前声明的，你到别的地方找找吧，果然，这样就可以顺利通过编译啦。但是你要是想欺骗编译器也是不行的，比如你声明了<code>extern int num；</code>但是在后面却没有真正的给出<code>num</code>变量的声明，那么编译器去别的地方找了，但是没找到还是不行的。</p><p>下面的程序就是利用<code>extern</code>关键字，使用在后边定义的变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func();  <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);  <span class="comment">// 3 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、引用另一个文件中的变量"><a href="#二、引用另一个文件中的变量" class="headerlink" title="二、引用另一个文件中的变量"></a>二、引用另一个文件中的变量</h3><p>如果<code>extern</code>这个关键字就这点功能，那么这个关键字就显得多余了，因为上边的程序可以通过将<code>num</code>变量在<code>main</code>函数的上边声明，使得在<code>main</code>函数中也可以使用。<br><code>extern</code>这个关键字的真正的作用是引用不在同一个文件中的变量或者函数。</p><p><strong>实例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> num;  <span class="comment">// 引用b.c中的num</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在b.c文件中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fun in b.c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，这里<code>b.c</code>中定义了一个变量num，如果<code>main.c</code>中想要引用这个变量，那么可以使用<code>extern</code>这个关键字，注意这里能成功引用的原因是，<code>num</code>这个关键字在<code>b.c</code>中是一个全局变量，也就是说只有当一个变量是一个全局变量时，<code>extern</code>变量才会起作用，向下面这样是不行的。</p><p><strong>实例：</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在mian.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> num;  <span class="comment">// ok 声明时候不会报错</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);  <span class="comment">// error </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在b.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">5</span>;  <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fun in b.c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，<code>extern</code>关键字只需要指明类型和变量名就行了，不能再重新赋值，初始化需要在原文件所在处进行，如果不进行初始化的话，全局变量会被编译器自动初始化为0。下面像这种写法是不行的，<code>extern int num=4;</code> ，<br>但是在声明之后就可以使用变量名进行修改了，像这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> num;</span><br><span class="line">    num=<span class="number">1</span>;  <span class="comment">// ok </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想这个变量被修改可以使用const关键字进行修饰，写法如下： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在mian.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在b.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fun in b.c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>include</code>将另一个文件全部包含进去可以引用另一个文件中的变量，但是这样做的结果就是，被包含的文件中的所有的变量和方法都可以被这个文件使用，这样就变得不安全，如果只是希望一个文件使用另一个文件中的某个变量还是使用<code>extern</code>关键字更好（注意：没有<code>include &quot;b.c&quot;</code>文件）。</p><h3 id="三、引用另一个文件中的函数"><a href="#三、引用另一个文件中的函数" class="headerlink" title="三、引用另一个文件中的函数"></a>三、引用另一个文件中的函数</h3><p><code>extern</code> 关键字除了引用另一个文件中的变量外，还可以引用另一个文件中的函数，引用方法和引用变量相似。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在mian.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在b.c中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fun in b.c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>main</code>函数中引用了<code>b.c</code>中的函数<code>func</code>。因为所有的函数都是全局的，所以对函数的<code>extern</code>用法和对全局变量的修饰基本相同，需要注意的就是，需要指明返回值的类型和参数。</p><p>文章转自网络，查看原文章，请访问：<a href="http://blog.csdn.net/xingjiarong/article/details/47656339" target="_blank" rel="noopener">http://blog.csdn.net/xingjiarong/article/details/47656339</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用关键字extern，可以在一个文件中引用另一个文件中定义的变量或者函数，下面就结合具体的实例，分类说明一下。 &lt;/p&gt;
&lt;h3 id=&quot;一、引用同一个文件中的变量&quot;&gt;&lt;a href=&quot;#一、引用同一个文件中的变量&quot; class=&quot;headerlink&quot; title=&quot;一、引用同一个文件中的变量&quot;&gt;&lt;/a&gt;一、引用同一个文件中的变量&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果按照这个顺序，变量 &lt;code&gt;num&lt;/code&gt;在&lt;code&gt;main&lt;/code&gt;函数的后边进行声明和初始化的话，那么在&lt;code&gt;main&lt;/code&gt;函数中是不能直接引用&lt;code&gt;num&lt;/code&gt;这个变量的，因为当编译器编译到这一句话的时候，找不到&lt;code&gt;num&lt;/code&gt;这个变量的声明，但是在&lt;code&gt;func&lt;/code&gt;函数中是可以正常使用，因为&lt;code&gt;func&lt;/code&gt;对&lt;code&gt;num&lt;/code&gt;的调用是发生在&lt;code&gt;num&lt;/code&gt;的声明和初始化之后。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://fanhang64.github.io/categories/C-C/"/>
    
    
      <category term="C语言" scheme="https://fanhang64.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>numpy常用数组操作函数</title>
    <link href="https://fanhang64.github.io/2019/05/08/numpy%E5%B8%B8%E7%94%A8%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0-md/"/>
    <id>https://fanhang64.github.io/2019/05/08/numpy常用数组操作函数-md/</id>
    <published>2019-05-08T15:34:59.000Z</published>
    <updated>2019-08-01T08:20:50.441Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Numpy-数组操作函数"><a href="#Numpy-数组操作函数" class="headerlink" title="Numpy 数组操作函数"></a>Numpy 数组操作函数</h4><p>Numpy 中包含了一些函数用于处理数组，大概可分为以下几类：</p><ul><li>修改数组形状</li><li>翻转数组</li><li>连接数组</li><li>分割数组</li><li>数组元素的添加与删除<a id="more"></a></li></ul><h4 id="修改数组形状"><a href="#修改数组形状" class="headerlink" title="修改数组形状"></a>修改数组形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  numpy.reshape(shape, order='C')  </span></span><br><span class="line"><span class="comment"># 参数: order：'C' -- 按行，'F' -- 按列，'A' -- 原顺序，'k' -- 元素在内存中的出现顺序。</span></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndarray.flatten(order='C')</span></span><br><span class="line"><span class="comment"># 返回一份数组拷贝,并返回一维数组</span></span><br><span class="line"><span class="comment"># 参数: </span></span><br><span class="line">&gt;&gt; arr.flatten()</span><br><span class="line">array([ <span class="number">1</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">7</span>,  <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.ravel([order])</span></span><br><span class="line"><span class="comment"># 展平的数组元素，返回一维数组拷贝,不影响原数组。</span></span><br><span class="line">&gt;&gt; arr.ravel()</span><br><span class="line">array([ <span class="number">1</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">7</span>,  <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>])</span><br><span class="line">&gt;&gt; arr</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure><h4 id="翻转数组函数"><a href="#翻转数组函数" class="headerlink" title="翻转数组函数"></a>翻转数组函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  np.transpose(a, axes=None)  #  函数用于对换数组的维度</span></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">&gt;&gt; print(np.transpose(arr))</span><br><span class="line">&gt;&gt; print(arr.T)  <span class="comment"># 转置矩阵(同上)</span></span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">0</span>  <span class="number">4</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><h4 id="连接数组"><a href="#连接数组" class="headerlink" title="连接数组"></a>连接数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.concatenate((a1, a2, ...), axis)  # 数用于沿指定轴连接相同形状的两个或多个数组</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">&gt;&gt; arr2 = np.array([[<span class="number">5</span> ,<span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line">&gt;&gt; print(arr, arr2)</span><br><span class="line">&gt;&gt; print(np.concatenate((arr, arr2)))  <span class="comment"># 沿着行连接</span></span><br><span class="line">&gt;&gt; print(np.concatenate((arr, arr2), axis=<span class="number">1</span>)  <span class="comment"># 沿着列链接</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]] [[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line"><span class="comment"># np.stack(arrays, axis=0)  # 函数用于沿指定轴堆积数组序列</span></span><br><span class="line">&gt;&gt; arr = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">&gt;&gt; arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line">&gt;&gt; print(np.stack((arr, arr2)))  <span class="comment"># 沿着行堆积数组, 二维堆成三维</span></span><br><span class="line">&gt;&gt; print(np.stack((arr, arr2), axis=<span class="number">1</span>))  <span class="comment"># 沿着列堆积数组</span></span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">  [<span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line"> [[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">  [<span class="number">7</span> <span class="number">8</span>]]]</span><br><span class="line"></span><br><span class="line">[[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">  [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">  [<span class="number">7</span> <span class="number">8</span>]]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.hstack()  # 通过水平堆积来生成数组(横向)</span></span><br><span class="line">&gt;&gt; a = np.array((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">&gt;&gt; b = np.array((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">&gt;&gt; np.hstack((a,b))</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">&gt;&gt; a = np.array([</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    [<span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>]</span><br><span class="line">])</span><br><span class="line">&gt;&gt; b = np.array([</span><br><span class="line">    [<span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>]</span><br><span class="line">])</span><br><span class="line">&gt;&gt; np.hstack((a,b))  <span class="comment"># 水平扩展(a的[1]与b的[2])</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.vstack()  # 通过竖直堆积生成数组</span></span><br><span class="line">&gt;&gt; a = np.array([</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">])</span><br><span class="line">&gt;&gt; b = np.array([</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">])</span><br><span class="line">&gt;&gt; print(np.vstack((a, b)))</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure><h4 id="分割数组"><a href="#分割数组" class="headerlink" title="分割数组"></a>分割数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.split(arr, indices_or_sections, axis=0) # 函数沿特定的轴将数组分割为子数组</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; a = np.arange(<span class="number">9</span>)</span><br><span class="line">&gt;&gt; np.split(a, <span class="number">1</span>)</span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])]</span><br><span class="line">&gt;&gt; np.split(a, <span class="number">3</span>)  <span class="comment"># 将数组分为三个大小相等的子数组</span></span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]), array([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), array([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])]</span><br><span class="line">&gt;&gt; np.split(a, [<span class="number">4</span>, <span class="number">7</span>])  <span class="comment"># 将数组在一维数组中表明的位置分割</span></span><br><span class="line">[array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]), array([<span class="number">7</span>, <span class="number">8</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.hsplit(arr, indices_or_sections) 函数用于水平分割数组，通过指定要返回的相同形状的数组数量来拆分原数组。</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; x = np.arange(<span class="number">16.0</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">&gt;&gt; print(x)</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">       [<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>]])</span><br><span class="line">&gt;&gt; np.hsplit(x, <span class="number">2</span>)</span><br><span class="line">[array([[ <span class="number">0.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>],</span><br><span class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>],</span><br><span class="line">       [<span class="number">12.</span>, <span class="number">13.</span>]]), array([[ <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">       [<span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">       [<span class="number">14.</span>, <span class="number">15.</span>]])]</span><br><span class="line">&gt;&gt; np.hsplit(x, np.array([<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line">[array([[ <span class="number">0.</span>],</span><br><span class="line">        [ <span class="number">4.</span>],</span><br><span class="line">        [ <span class="number">8.</span>],</span><br><span class="line">        [<span class="number">12.</span>]]), array([[ <span class="number">1.</span>],</span><br><span class="line">        [ <span class="number">5.</span>],</span><br><span class="line">        [ <span class="number">9.</span>],</span><br><span class="line">        [<span class="number">13.</span>]]), array([[ <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">        [ <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">        [<span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">        [<span class="number">14.</span>, <span class="number">15.</span>]])]</span><br></pre></td></tr></table></figure><p>参考文档:<br><a href="https://www.runoob.com/numpy/numpy-array-manipulation.html" target="_blank" rel="noopener">https://www.runoob.com/numpy/numpy-array-manipulation.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Numpy-数组操作函数&quot;&gt;&lt;a href=&quot;#Numpy-数组操作函数&quot; class=&quot;headerlink&quot; title=&quot;Numpy 数组操作函数&quot;&gt;&lt;/a&gt;Numpy 数组操作函数&lt;/h4&gt;&lt;p&gt;Numpy 中包含了一些函数用于处理数组，大概可分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改数组形状&lt;/li&gt;
&lt;li&gt;翻转数组&lt;/li&gt;
&lt;li&gt;连接数组&lt;/li&gt;
&lt;li&gt;分割数组&lt;/li&gt;
&lt;li&gt;数组元素的添加与删除
    
    </summary>
    
      <category term="数据分析与机器学习" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据" scheme="https://fanhang64.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加访问量统计</title>
    <link href="https://fanhang64.github.io/2019/05/07/hexo%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/"/>
    <id>https://fanhang64.github.io/2019/05/07/hexo添加访问量统计/</id>
    <published>2019-05-06T16:30:18.000Z</published>
    <updated>2019-08-01T08:20:50.440Z</updated>
    
    <content type="html"><![CDATA[<p>使用的是不蒜子提供的阅读统计功能，hexo主题是next。</p><h4 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下:"></a>步骤如下:</h4><h5 id="1-添加是否开启统计功能的配置"><a href="#1-添加是否开启统计功能的配置" class="headerlink" title="1) 添加是否开启统计功能的配置"></a>1) 添加是否开启统计功能的配置</h5><a id="more"></a><p>找到next主题的配置文件<code>themes/next/_config.yml</code>，找到原来的footer字段，加入一个配置，这里我们叫它counter吧，即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  counter: true</span><br></pre></td></tr></table></figure></p><p><strong>注意:</strong><br>hexo博客解决不蒜子统计无法显示问题, 这里引用官网</p><blockquote><p>因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！</p></blockquote><h5 id="2-修改next主题的模板文件"><a href="#2-修改next主题的模板文件" class="headerlink" title="2) 修改next主题的模板文件"></a>2) 修改next主题的模板文件</h5><p>由于是把访问量统计放在网页的footer，所以我们需要修改的模板文件是<code>theme/next/layout/_partials/footer.swig</code>。<br>我们在合适的位置加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.footer.counter %&#125;</span><br><span class="line">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访客&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用的是不蒜子提供的阅读统计功能，hexo主题是next。&lt;/p&gt;
&lt;h4 id=&quot;步骤如下&quot;&gt;&lt;a href=&quot;#步骤如下&quot; class=&quot;headerlink&quot; title=&quot;步骤如下:&quot;&gt;&lt;/a&gt;步骤如下:&lt;/h4&gt;&lt;h5 id=&quot;1-添加是否开启统计功能的配置&quot;&gt;&lt;a href=&quot;#1-添加是否开启统计功能的配置&quot; class=&quot;headerlink&quot; title=&quot;1) 添加是否开启统计功能的配置&quot;&gt;&lt;/a&gt;1) 添加是否开启统计功能的配置&lt;/h5&gt;
    
    </summary>
    
      <category term="hexo的使用" scheme="https://fanhang64.github.io/categories/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="hexo的入门" scheme="https://fanhang64.github.io/tags/hexo%E7%9A%84%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>numpy的基本使用</title>
    <link href="https://fanhang64.github.io/2019/05/05/numpy%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://fanhang64.github.io/2019/05/05/numpy的基本使用/</id>
    <published>2019-05-04T16:06:12.000Z</published>
    <updated>2019-08-01T08:20:50.443Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NumPy的基本使用"><a href="#NumPy的基本使用" class="headerlink" title="NumPy的基本使用"></a>NumPy的基本使用</h4><p>Numpy是一个开源的Python科学计算库，它是Python进行科学计算的基础库，许多著名的科学计算库如Pandas，Scikit-learn等都要用到Numpy库的一些功能。NumPy根据BSD许可证授权，只需很少的限制即可重复使用。<br><a id="more"></a></p><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p>NumPy是一个元素表(通常是数字), 这些元素都具有相同的类型，由正整数元组索引的多维数组。在NumPy维度中称为轴。</p><p>例如:</p><p>在一个3D空间中[<code>1, 2, 1]</code> 有一个轴, 这个轴里面有三个元素, 因此它的长度就是3。如下所示, 这个数组有2个轴, 第一个轴长度为2 即<code>[1., 0., 0.]</code>和<code>[0., 1., 2.]</code> ,  第二个轴长度为3(三个元素)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line"> [ <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>]]</span><br></pre></td></tr></table></figure><p>NumPy的类型称为<code>ndarray</code>, 即数组。请注意，<code>numpy.array</code>与标准Python库类<code>array.array</code>不同。如下是常用属性: </p><p><strong>ndarray.ndim : </strong> 数组轴的个数(维度)。</p><p><strong>ndarray.shape : </strong> 数组的维度, 返回一个整数的元组, 表示这个维度数组的大小, 对于一个n行和m列的矩阵，<code>shape</code>将为<code>（n，m）</code>。注意，<code>shape</code>这个元组的长度是轴的数量即<code>ndim</code>。</p><p><strong>ndarray.size : </strong> 数组所有元素的个数。</p><p><strong>ndarray.dtype : </strong> 描述数组元素类型。</p><p><strong>ndarray.itemsize : </strong> 数组中每个元素的字节大小。</p><p><strong>ndarray.T : </strong> 数组的转置。</p><p><strong>ndarray.real : </strong> 输出数组包含元素的实部。</p><p><strong>ndarray.imag : </strong> 输出数组包含元素的虚部分。</p><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.arange([start,] stop[, step,], dtype=None)</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">3</span>)</span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([0, 1, 2])</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">3.0</span>)  <span class="comment"># 与python标准库函数range不同, arange可以传float类型参数</span></span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([0., 1., 2.])</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([3, 4, 5, 6])</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line"><span class="comment">#       [ 5,  6,  7,  8,  9],</span></span><br><span class="line"><span class="comment">#       [10, 11, 12, 13, 14]])</span></span><br><span class="line">print(arr.shape)  <span class="comment"># (3, 5)</span></span><br><span class="line">print(arr.ndim)  <span class="comment"># 2</span></span><br><span class="line">print(arr.dtype.name)  <span class="comment"># int64</span></span><br><span class="line">print(arr.itemsize)  <span class="comment"># 8</span></span><br><span class="line">print(arr.size)  <span class="comment"># 15</span></span><br><span class="line">print(type(arr))  <span class="comment"># &lt;type 'numpy.ndarray'&gt;</span></span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(type(arr))  <span class="comment"># &lt;type 'numpy.ndarray'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><p><strong>1) 通过列表或元组创建</strong></p><p>最终数组的类型取决于序列中元素的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(arr)  <span class="comment"># array([2, 3, 4])</span></span><br><span class="line">print(arr.dtype)  <span class="comment"># dtype('int64')</span></span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">3.4</span>])</span><br><span class="line">print(arr.dtype)  <span class="comment"># dtype('float64')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维数组 (2*3)</span></span><br><span class="line">arr2 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>], [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line">print(arr2)</span><br><span class="line"><span class="comment"># array([[1, 2, 4],</span></span><br><span class="line"><span class="comment">#       [3, 4, 5]])</span></span><br></pre></td></tr></table></figure><p><strong>2) 通过np.arrange()等方法创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">print(arr)  <span class="comment"># array([10, 15, 20, 25])</span></span><br><span class="line"></span><br><span class="line">arr = np.zeros((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(arr)  <span class="comment"># 创建一个全为0的数组</span></span><br><span class="line"><span class="comment"># array([[ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="comment">#       [ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="comment">#       [ 0.,  0.,  0.,  0.]])</span></span><br><span class="line"></span><br><span class="line">arr = np.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype=np.int16)  <span class="comment"># 可以指定参数</span></span><br><span class="line">print(arr)  <span class="comment"># 创建一个全为1的数组</span></span><br><span class="line"><span class="comment"># array([[[ 1, 1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [ 1, 1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [ 1, 1, 1, 1]],</span></span><br><span class="line"><span class="comment">#       [[ 1, 1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [ 1, 1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [ 1, 1, 1, 1]]], dtype=int16)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None) </span></span><br><span class="line"><span class="comment"># 返回在start到stop之间均匀分布的num个数字，可以选择是否包括stop. retstep表示是否返回步长.</span></span><br><span class="line"></span><br><span class="line">arr = np.linspace(<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="literal">True</span>)</span><br><span class="line">print(arr)  <span class="comment"># array([ 1.,  2.,  3.,  4.,  5.])</span></span><br><span class="line"></span><br><span class="line">arr = np.linspace(<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="literal">False</span>)</span><br><span class="line">print(arr)  <span class="comment"># array([ 1. ,  1.8,  2.6,  3.4,  4.2])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.eye(N, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C')</span></span><br><span class="line"><span class="comment"># 返回一个二维数组，其中对角线为1，其他位置为零。k：对角线的索引：0（默认值）是主对角线，正值指的是上对角线，负值指的是下对角线。</span></span><br><span class="line">arr = np.eye(<span class="number">2</span>, dtype=int)</span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([[1, 0],</span></span><br><span class="line"><span class="comment">#        [0, 1]])</span></span><br><span class="line"></span><br><span class="line">arr = np.eye(<span class="number">3</span>, k=<span class="number">1</span>)</span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([[0.,  1.,  0.],</span></span><br><span class="line"><span class="comment">#       [0.,  0.,  1.],</span></span><br><span class="line"><span class="comment">#       [0.,  0.,  0.]])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ones_like，zeros_like，empty_like函数</span></span><br><span class="line"><span class="comment"># 返回一个与给定数组具有相同形状和类型的数组。</span></span><br><span class="line">x = np.arange(<span class="number">6</span>)</span><br><span class="line">x = x.reshape((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># array([[0, 1, 2],</span></span><br><span class="line"><span class="comment">#       [3, 4, 5]])</span></span><br><span class="line">arr = np.ones_like(x)  <span class="comment"># zeros_like，empty_like雷同</span></span><br><span class="line">print(arr)</span><br><span class="line"><span class="comment"># array([[1, 1, 1],</span></span><br><span class="line"><span class="comment">#        [1, 1, 1]])</span></span><br></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line">print(b)  <span class="comment"># array([0, 1, 2, 3])</span></span><br><span class="line">c = a - b</span><br><span class="line">print(c)  <span class="comment"># array([20, 29, 38, 47])</span></span><br><span class="line"></span><br><span class="line">d = b ** <span class="number">2</span> </span><br><span class="line">print(d)  <span class="comment"># array([0, 1, 4, 9])</span></span><br><span class="line">e = <span class="number">10</span> * np.sin(a)</span><br><span class="line">print(e)  <span class="comment"># array([ 9.12945251, -9.88031624,  7.4511316 , -2.62374854])</span></span><br><span class="line">f = a &lt; <span class="number">35</span></span><br><span class="line">print(f)  <span class="comment"># array([ True, True, False, False])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵(数组)*点乘和@叉乘</span></span><br><span class="line">A = np.array([[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">B = np.array([[<span class="number">2</span>,<span class="number">0</span>],</span><br><span class="line">           [<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">print(A * B)</span><br><span class="line"><span class="comment"># array([[2, 0],</span></span><br><span class="line"><span class="comment">#        [0, 4]])</span></span><br><span class="line">print(A @ B)  <span class="comment"># 同 A.dot(B)</span></span><br><span class="line"><span class="comment"># array([[5, 4],</span></span><br><span class="line"><span class="comment">#        [3, 4]])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重设形状</span></span><br><span class="line"><span class="comment"># np.reshape(shape, order='C')</span></span><br><span class="line">print(np.arange(<span class="number">6</span>).reshape((<span class="number">3</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="comment"># [[0 1]</span></span><br><span class="line"><span class="comment">#  [2 3]</span></span><br><span class="line"><span class="comment">#  [4 5]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组展开</span></span><br><span class="line"><span class="comment"># np.ravel([order])  # order 表示变换时的读取顺序，默认是Order='C' 按照行依次读取，当 order='F' 时，可以按列依次读取</span></span><br><span class="line">arr = np.arange(<span class="number">6</span>).reshape((<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">print(arr.ravel())  <span class="comment"># array([0, 1, 2, 3, 4, 5])</span></span><br><span class="line">print(arr.ravel(<span class="string">'F'</span>)  <span class="comment"># array([0, 2, 4, 1, 3, 5])</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><strong>大小相等的数组之间的任何算术运算都会将运算应用到元素级</strong></li><li><strong>数组与标量的算术运算会将标量值传播到各个元素</strong></li></ul><h4 id="索引-切片-迭代"><a href="#索引-切片-迭代" class="headerlink" title="索引, 切片, 迭代"></a>索引, 切片, 迭代</h4><h5 id="1-一维数组操作"><a href="#1-一维数组操作" class="headerlink" title="(1) 一维数组操作"></a>(1) 一维数组操作</h5><p>一维数组可以进行索引，切片和迭代操作，就像列表和其他Python序列一样。</p><p><strong>Example: </strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>) ** <span class="number">3</span></span><br><span class="line">print(a)  <span class="comment"># array([ 0, 1, 8, 27, 64, 125, 216, 343, 512, 729])</span></span><br><span class="line"></span><br><span class="line">print(a[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># array([8, 27, 64])</span></span><br><span class="line">a[:<span class="number">6</span>:<span class="number">2</span>] = <span class="number">1000</span>  <span class="comment"># 等同于a[0:6:2] = -1000 即 0 2 4 置为0</span></span><br><span class="line">a[::<span class="number">-1</span>]  <span class="comment"># array([729, 512, 343, 216, 125, -1000, 27, -1000, 1, -1000])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i)  <span class="comment"># 0 1 ...</span></span><br></pre></td></tr></table></figure><h5 id="2-多维数组操作"><a href="#2-多维数组操作" class="headerlink" title="(2) 多维数组操作"></a>(2) 多维数组操作</h5><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>   <span class="keyword">return</span> <span class="number">10</span> * x + y</span><br><span class="line">&gt;&gt; arr = np.fromfunction(f, (<span class="number">5</span>, <span class="number">4</span>), dtype=int)</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</span><br><span class="line">       [<span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>],</span><br><span class="line">       [<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>]])</span><br><span class="line">&gt;&gt; b[<span class="number">1</span>, <span class="number">3</span>]  <span class="comment"># b[行索引, 列索引]</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line">&gt;&gt; b[<span class="number">0</span>:<span class="number">5</span>, <span class="number">1</span>]  <span class="comment"># 每一行的第1列</span></span><br><span class="line">array([ <span class="number">1</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">31</span>, <span class="number">41</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt; b[<span class="number">1</span>:<span class="number">3</span>, :]  <span class="comment"># 第1-2行的所有列</span></span><br><span class="line">array([[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]])</span><br><span class="line"></span><br><span class="line">&gt;&gt; c = np.arange(<span class="number">12</span>)</span><br><span class="line">&gt;&gt; print(c)</span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line">&gt;&gt; print(c[<span class="number">4</span>])  <span class="comment"># 4</span></span><br><span class="line">&gt;&gt; c.shape = (<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># c变为2维数组</span></span><br><span class="line">&gt;&gt; print(c)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><p>当提供的索引数少于轴数时，缺失的索引将被视为完整切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; b[<span class="number">-1</span>]  <span class="comment"># 取最后一行,等同于b[-1,:]</span></span><br><span class="line">array([<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>])</span><br></pre></td></tr></table></figure><p>针对第一个轴对多维数组进行迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line"><span class="meta">... </span>   print(i)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span>]</span><br><span class="line">[<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]</span><br><span class="line">[<span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span>]</span><br><span class="line">[<span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过np.flat遍历每一个元素, flat属性返回一个迭代器, </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> b.flat:</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="3-整数数组索引"><a href="#3-整数数组索引" class="headerlink" title="(3) 整数数组索引"></a>(3) 整数数组索引</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">&gt;&gt; arr[np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">7</span>])]  <span class="comment"># 由值2，2，-3和7组成的索引数组相应地创建了一个长度为4的数组。</span></span><br><span class="line">array([<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">6</span>).reshape((<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span>]]</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr2 = arr[[<span class="number">0</span>,<span class="number">1</span>]]  <span class="comment"># 获取0,1行的值</span></span><br><span class="line">&gt;&gt; print(arr2)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这种情况，如果索引数组具有匹配的形状，并且索引数组的每个维都有一个索引数组，则结果数组具有与索引数组相同的形状，并且这些值对应于每个索引集的索引在索引数组中的位置。在此示例中，两个索引数组的第一个索引值为0，因此结果数组的第一个值为arr3[0,0]。下一个值是arr3[1,1]，最后一个是arr3[2,3]</span></span><br><span class="line">&gt;&gt; arr3 = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&gt;&gt; print(arr3)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">&gt;&gt; arr3[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>]]</span><br><span class="line">[<span class="number">0</span>  <span class="number">5</span> <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr4 = arr3[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>]]  <span class="comment"># 获取0,1行第1列的值, 尝试将它们广播到相同的形状，即取值arr3[0,1]，arr3[1, 1], arr3[2, 1]</span></span><br><span class="line">&gt;&gt; print(arr4)</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">12</span>).reshape((<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">&gt;&gt; rows = np.array([[<span class="number">0</span>,<span class="number">0</span>], [<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">&gt;&gt; cols = np.array([[<span class="number">0</span>,<span class="number">2</span>], [<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line">&gt;&gt; x = arr[rows, cols]  <span class="comment"># 取四个角元素</span></span><br><span class="line">&gt;&gt; print(x)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><h5 id="4-布尔索引"><a href="#4-布尔索引" class="headerlink" title="(4) 布尔索引"></a>(4) 布尔索引</h5><p>布尔数组的形状必须与被索引数组的初始维度相同，其中包含索引数组中所有对应于布尔数组中所有真实元素的元素。</p><p><strong>Example:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">&gt;&gt; x = arr &gt; <span class="number">7</span></span><br><span class="line">&gt;&gt; print(x)</span><br><span class="line">[[<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [ <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>]]</span><br><span class="line">&gt;&gt;  arr[x]  <span class="comment"># 结果为一维数组</span></span><br><span class="line">array([ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt; y = x[:, <span class="number">1</span>]</span><br><span class="line">&gt;&gt; print(y)  <span class="comment"># 所有行的第一列元素(广播)</span></span><br><span class="line">[<span class="literal">False</span> <span class="literal">False</span>  <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr[y]  <span class="comment"># 即取第2行, 0,1行为False不取</span></span><br><span class="line">array([[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure><h4 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h4><p>广播(Broadcast)是 numpy 对不同shape的数组进行数值计算的方式，对数组的算术运算通常是元素级别的。</p><p>如果两个数组 a 和 b 形状相同，即满足<code>a.shape == b.shape</code>，那么 a*b 的结果就是 a 与 b 数组对应位置的元素相乘。这要求维数相同，且各维度的长度相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">arr2 = np.arange(<span class="number">11</span>, <span class="number">14</span>)</span><br><span class="line">arr = arr1 + arr2</span><br><span class="line">print(arr)  <span class="comment"># [12 14 16]</span></span><br></pre></td></tr></table></figure><p>当执行操作的两个数组, shape不同时,会自动触发广播机制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr2 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">&gt;&gt; arr3 = np.arange(<span class="number">12</span>).reshape((<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt; arr = arr2 + arr3  <span class="comment"># ==&gt; 等同于 arr2为[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]相加</span></span><br><span class="line">&gt;&gt; print(arr)</span><br><span class="line">[[ <span class="number">1</span>  <span class="number">3</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">6</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">7</span>  <span class="number">9</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">12</span> <span class="number">14</span>]]</span><br></pre></td></tr></table></figure><p>参考文档：</p><p><a href="https://www.numpy.org/devdocs/user/quickstart.html" target="_blank" rel="noopener">https://www.numpy.org/devdocs/user/quickstart.html</a></p><p> <a href="https://www.numpy.org.cn/user_guide/numpy_basics/indexing.html" target="_blank" rel="noopener">https://www.numpy.org.cn/user_guide/numpy_basics/indexing.html</a> </p><p><a href="https://www.runoob.com/numpy/numpy-broadcast.html" target="_blank" rel="noopener">https://www.runoob.com/numpy/numpy-broadcast.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;NumPy的基本使用&quot;&gt;&lt;a href=&quot;#NumPy的基本使用&quot; class=&quot;headerlink&quot; title=&quot;NumPy的基本使用&quot;&gt;&lt;/a&gt;NumPy的基本使用&lt;/h4&gt;&lt;p&gt;Numpy是一个开源的Python科学计算库，它是Python进行科学计算的基础库，许多著名的科学计算库如Pandas，Scikit-learn等都要用到Numpy库的一些功能。NumPy根据BSD许可证授权，只需很少的限制即可重复使用。&lt;br&gt;
    
    </summary>
    
      <category term="数据分析与机器学习" scheme="https://fanhang64.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据" scheme="https://fanhang64.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
