<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo添加访问量统计]]></title>
    <url>%2F2019%2F05%2F07%2Fhexo%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[使用的是不蒜子提供的阅读统计功能，hexo主题是next。 步骤如下:1) 添加是否开启统计功能的配置 找到next主题的配置文件themes/next/_config.yml，找到原来的footer字段，加入一个配置，这里我们叫它counter吧，即12footer: counter: true 注意:hexo博客解决不蒜子统计无法显示问题, 这里引用官网 因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！ 2) 修改next主题的模板文件由于是把访问量统计放在网页的footer，所以我们需要修改的模板文件是theme/next/layout/_partials/footer.swig。我们在合适的位置加入：123456789&#123;% if theme.footer.counter %&#125; &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访客&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125;]]></content>
      <categories>
        <category>hexo的使用</category>
      </categories>
      <tags>
        <tag>hexo的入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy的基本使用]]></title>
    <url>%2F2019%2F05%2F05%2Fnumpy%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[NumPy的基本使用Numpy是一个开源的Python科学计算库，它是Python进行科学计算的基础库，许多著名的科学计算库如Pandas，Scikit-learn等都要用到Numpy库的一些功能。NumPy根据BSD许可证授权，只需很少的限制即可重复使用。 基础知识NumPy是一个元素表(通常是数字), 这些元素都具有相同的类型，由正整数元组索引的多维数组。在NumPy维度中称为轴。 例如: 在一个3D空间中[1, 2, 1] 有一个轴, 这个轴里面有三个元素, 因此它的长度就是3。如下所示, 这个数组有2个轴, 第一个轴长度为2 即[1., 0., 0.]和[0., 1., 2.] , 第二个轴长度为3(三个元素)。 12[[ 1., 0., 0.], [ 0., 1., 2.]] NumPy的类型称为ndarray, 即数组。请注意，numpy.array与标准Python库类array.array不同。如下: ndarray.ndim : 数组轴的个数(维度)。 ndarray.shape : 数组的维度, 返回一个整数的元组, 表示这个维度数组的大小, 对于一个n行和m列的矩阵，shape将为（n，m）。注意，shape这个元组的长度是轴的数量即ndim。 ndarray.size : 数组所有元素的个数。 ndarray.dtype : 描述数组元素类型。 ndarray.itemsize : 数组中每个元素的字节大小 Example: 1234567891011121314151617181920212223242526272829import numpy as np# np.arange([start,] stop[, step,], dtype=None)arr = np.arange(3)print(arr)# array([0, 1, 2])arr = np.arange(3.0) # 与python标准库函数range不同, arange可以传float类型参数print(arr)# array([0., 1., 2.])arr = np.arange(3, 7)print(arr)# array([3, 4, 5, 6])arr = np.arange(15).reshape(3, 5)# array([[ 0, 1, 2, 3, 4],# [ 5, 6, 7, 8, 9],# [10, 11, 12, 13, 14]])print(arr.shape) # (3, 5)print(arr.ndim) # 2print(arr.dtype.name) # int64print(arr.itemsize) # 8print(arr.size) # 15print(type(arr)) # &lt;type 'numpy.ndarray'&gt;arr = np.array([1,2, 3])print(type(arr)) # &lt;type 'numpy.ndarray'&gt; 创建数组1) 通过列表或元组创建 最终数组的类型取决于序列中元素的类型 1234567891011121314import numpy as nparr = np.array([2, 3, 4])print(arr) # array([2, 3, 4])print(arr.dtype) # dtype('int64')arr = np.array([1.2, 2.3, 3.4])print(arr.dtype) # dtype('float64')# 二维数组 (2*3)arr2 = np.array([[1,2,4], [3,4,5]])print(arr2)# array([[1, 2, 4],# [3, 4, 5]]) 2) 通过np.arrange()等方法创建 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import numpy as nparr = np.arange(10, 30, 5)print(arr) # array([10, 15, 20, 25])arr = np.zeros((3,4))print(arr) # 创建一个全为0的数组# array([[ 0., 0., 0., 0.],# [ 0., 0., 0., 0.],# [ 0., 0., 0., 0.]])arr = np.ones((2, 3, 4), dtype=np.int16) # 可以指定参数print(arr) # 创建一个全为1的数组# array([[[ 1, 1, 1, 1],# [ 1, 1, 1, 1],# [ 1, 1, 1, 1]],# [[ 1, 1, 1, 1],# [ 1, 1, 1, 1],# [ 1, 1, 1, 1]]], dtype=int16)# linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None) # 返回在start到stop之间均匀分布的num个数字，可以选择是否包括stop. retstep表示是否返回步长.arr = np.linspace(1, 5, 5, True)print(arr) # array([ 1., 2., 3., 4., 5.])arr = np.linspace(1, 5, 5, False)print(arr) # array([ 1. , 1.8, 2.6, 3.4, 4.2])# numpy.eye(N, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C')# 返回一个二维数组，其中对角线为1，其他位置为零。k：对角线的索引：0（默认值）是主对角线，正值指的是上对角线，负值指的是下对角线。arr = np.eye(2, dtype=int)print(arr)# array([[1, 0],# [0, 1]])arr = np.eye(3, k=1)print(arr)# array([[0., 1., 0.],# [0., 0., 1.],# [0., 0., 0.]])# ones_like，zeros_like，empty_like函数# 返回一个与给定数组具有相同形状和类型的数组。x = np.arange(6)x = x.reshape((2, 3))print(x)# array([[0, 1, 2],# [3, 4, 5]])arr = np.ones_like(x) # zeros_like，empty_like雷同print(arr)# array([[1, 1, 1],# [1, 1, 1]]) 基本操作数组上的算术运算符应用于元素。 Example: 12345678910111213141516171819202122232425import numpy as npa = np.array([20, 30, 40, 50])b = np.arange(4)print(b) # array([0, 1, 2, 3])c = a - bprint(c) # array([20, 29, 38, 47])d = b ** 2 print(d) # array([0, 1, 4, 9])e = 10 * np.sin(a)print(e) # array([ 9.12945251, -9.88031624, 7.4511316 , -2.62374854])f = a &lt; 35print(f) # array([ True, True, False, False])# 矩阵(数组)*点乘和@叉乘A = np.array([[1,1], [0,1]])B = np.array([[2,0], [3,4]])print(A * B)# array([[2, 0],# [0, 4]])print(A @ B) # 同 A.dot(B)# array([[5, 4],# [3, 4]]) 注意: 大小相等的数组之间的任何算术运算都会将运算应用到元素级 数组与标量的算术运算会将标量值传播到各个元素 索引, 切片, 迭代未完待续..]]></content>
      <categories>
        <category>数据分析与机器学习</category>
      </categories>
      <tags>
        <tag>数据</tag>
      </tags>
  </entry>
</search>
